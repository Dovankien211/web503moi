===============================================
PH√ÇN T√çCH LU·ªíNG CH·∫†Y V√Ä GI·∫¢I TH√çCH CODE
===============================================

üìã T·ªîNG QUAN LU·ªíNG CH·∫†Y:
1. app.js kh·ªüi t·∫°o server Express
2. Router ƒë·ªãnh tuy·∫øn c√°c request ƒë·∫øn controller ph√π h·ª£p
3. Controller x·ª≠ l√Ω logic v√† tr·∫£ v·ªÅ response
4. Client nh·∫≠n response v√† c·∫≠p nh·∫≠t giao di·ªán

===============================================
üìÅ FILE: src/app.js - SERVER CH√çNH
===============================================

D√≤ng 1: import express from "express";
‚Üí Import th∆∞ vi·ªán Express ƒë·ªÉ t·∫°o web server

D√≤ng 2: import morgan from "morgan";
‚Üí Import th∆∞ vi·ªán Morgan ƒë·ªÉ log c√°c HTTP request (hi·ªÉn th·ªã th√¥ng tin request trong console)

D√≤ng 4-6: Import c√°c router
import postRouter from "./routers/post";
import userRouter from "./routers/user";
import productRouter from "./routers/product";
‚Üí Import c√°c module router ƒë·ªÉ x·ª≠ l√Ω c√°c endpoint kh√°c nhau

D√≤ng 8: const app = express();
‚Üí T·∫°o instance c·ªßa Express application

D√≤ng 11: app.use(morgan("dev"));
‚Üí S·ª≠ d·ª•ng middleware Morgan ·ªü ch·∫ø ƒë·ªô 'dev' ƒë·ªÉ log request
‚Üí Khi c√≥ request ƒë·∫øn, s·∫Ω hi·ªÉn th·ªã: GET /api/posts 200 15ms

D√≤ng 14: app.use(express.json());
‚Üí Middleware t√≠ch h·ª£p ƒë·ªÉ parse JSON t·ª´ request body
‚Üí Cho ph√©p ƒë·ªçc d·ªØ li·ªáu JSON t·ª´ req.body trong POST/PUT request

D√≤ng 17-19: Route g·ªëc
app.get("/", (req, res) => {
  res.send("Hello, chao cac ban: ");
});
‚Üí X·ª≠ l√Ω request GET ƒë·∫øn "/" (localhost:3000)
‚Üí Tr·∫£ v·ªÅ text "Hello, chao cac ban: "

D√≤ng 21: app.use("/api/posts", postRouter);
‚Üí Mount postRouter v√†o ƒë∆∞·ªùng d·∫´n "/api/posts"
‚Üí T·∫•t c·∫£ request b·∫Øt ƒë·∫ßu v·ªõi "/api/posts" s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn postRouter

D√≤ng 23-25: T∆∞∆°ng t·ª± cho user v√† product
app.use("/api/users", userRouter);
app.use("/api/products", productRouter);

D√≤ng 27-29: Kh·ªüi ƒë·ªông server
app.listen(3000, () => {
  console.log(`Server is running on port http://localhost:3000`);
});
‚Üí Server l·∫Øng nghe tr√™n port 3000
‚Üí Hi·ªÉn th·ªã th√¥ng b√°o khi server ƒë√£ s·∫µn s√†ng

===============================================
üìÅ FILE: src/routers/post.js - ƒê·ªäNH TUY·∫æN
===============================================

D√≤ng 1: import { Router } from "express";
‚Üí Import Router t·ª´ Express ƒë·ªÉ t·∫°o router con

D√≤ng 2-7: Import controllers
import {
  getPosts,
  getPostById,
  addPost,
  updatePost,
  deletePost,
} from "../controller/postController.js";
‚Üí Import c√°c function controller t·ª´ file postController.js

D√≤ng 10: const postRouter = Router();
‚Üí T·∫°o instance c·ªßa Router

D√≤ng 13: postRouter.get("/", getPosts);
‚Üí ƒê·ªãnh tuy·∫øn GET request ƒë·∫øn "/" (t·ª©c l√† "/api/posts") ƒë·∫øn function getPosts
‚Üí H·ªó tr·ª£ query parameter: GET /api/posts?search=keyword

D√≤ng 16: postRouter.get("/:id", getPostById);
‚Üí ƒê·ªãnh tuy·∫øn GET request v·ªõi parameter id ƒë·∫øn function getPostById
‚Üí V√≠ d·ª•: GET /api/posts/1 s·∫Ω g·ªçi getPostById v·ªõi req.params.id = "1"

D√≤ng 19: postRouter.post("/", addPost);
‚Üí ƒê·ªãnh tuy·∫øn POST request ƒë·∫øn "/" (t·ª©c l√† "/api/posts") ƒë·∫øn function addPost
‚Üí D√πng ƒë·ªÉ t·∫°o b√†i vi·∫øt m·ªõi

D√≤ng 22: postRouter.put("/:id", updatePost);
‚Üí ƒê·ªãnh tuy·∫øn PUT request v·ªõi parameter id ƒë·∫øn function updatePost
‚Üí D√πng ƒë·ªÉ c·∫≠p nh·∫≠t b√†i vi·∫øt c√≥ id t∆∞∆°ng ·ª©ng

D√≤ng 25: postRouter.delete("/:id", deletePost);
‚Üí ƒê·ªãnh tuy·∫øn DELETE request v·ªõi parameter id ƒë·∫øn function deletePost
‚Üí D√πng ƒë·ªÉ x√≥a b√†i vi·∫øt c√≥ id t∆∞∆°ng ·ª©ng

D√≤ng 27: export default postRouter;
‚Üí Export router ƒë·ªÉ s·ª≠ d·ª•ng trong app.js

===============================================
üìÅ FILE: src/controller/postController.js - X·ª¨ L√ù LOGIC
===============================================

D√≤ng 1-5: D·ªØ li·ªáu gi·∫£
let posts = [
  { id: 1, title: "B√†i vi·∫øt 1", content: "N·ªôi dung b√†i vi·∫øt 1" },
  { id: 2, title: "B√†i vi·∫øt 2", content: "N·ªôi dung b√†i vi·∫øt 2" },
];
‚Üí T·∫°o m·∫£ng posts l√†m database gi·∫£ (thay th·∫ø cho database th·∫≠t)

D√≤ng 8: export const getPosts = (req, res) => {
‚Üí Export function getPosts ƒë·ªÉ x·ª≠ l√Ω GET /api/posts

D√≤ng 9: try {
‚Üí B·∫Øt ƒë·∫ßu kh·ªëi try-catch ƒë·ªÉ x·ª≠ l√Ω l·ªói

D√≤ng 10: const { search } = req.query;
‚Üí L·∫•y parameter "search" t·ª´ query string
‚Üí V√≠ d·ª•: /api/posts?search=b√†i ‚Üí req.query.search = "b√†i"

D√≤ng 12: let filteredPosts = posts;
‚Üí Kh·ªüi t·∫°o bi·∫øn filteredPosts v·ªõi to√†n b·ªô danh s√°ch posts

D√≤ng 15-18: Logic t√¨m ki·∫øm
if (search) {
  filteredPosts = posts.filter(post => 
    post.title.toLowerCase().includes(search.toLowerCase())
  );
}
‚Üí N·∫øu c√≥ search parameter:
  - Chuy·ªÉn title v√† search v·ªÅ ch·ªØ th∆∞·ªùng
  - L·ªçc posts c√≥ title ch·ª©a t·ª´ kh√≥a search

D√≤ng 21-26: X·ª≠ l√Ω tr∆∞·ªùng h·ª£p kh√¥ng t√¨m th·∫•y
if (filteredPosts.length === 0) {
  return res.status(404).json({ 
    error: search ? "No posts found matching the search criteria" : "No posts found" 
  });
}
‚Üí N·∫øu kh√¥ng c√≥ posts n√†o ph√π h·ª£p, tr·∫£ v·ªÅ status 404 v·ªõi th√¥ng b√°o l·ªói

D√≤ng 28: return res.json(filteredPosts);
‚Üí Tr·∫£ v·ªÅ danh s√°ch posts ƒë√£ l·ªçc d∆∞·ªõi d·∫°ng JSON

D√≤ng 29-31: X·ª≠ l√Ω l·ªói
} catch (error) {
  return res.status(500).json({ error: "Internal server error" });
}
‚Üí N·∫øu c√≥ l·ªói x·∫£y ra, tr·∫£ v·ªÅ status 500

D√≤ng 35-44: Function getPostById
export const getPostById = (req, res) => {
  try {
    const id = Number(req.params.id);
    const post = posts.find((p) => p.id === id);
    if (!post) return res.status(404).json({ error: "Post not found" });
    return res.json(post);
  } catch (error) {
    return res.status(500).json({ error: "Internal server error" });
  }
};
‚Üí D√≤ng 37: Chuy·ªÉn req.params.id t·ª´ string sang number
‚Üí D√≤ng 38: T√¨m post c√≥ id t∆∞∆°ng ·ª©ng
‚Üí D√≤ng 39: N·∫øu kh√¥ng t√¨m th·∫•y, tr·∫£ v·ªÅ 404
‚Üí D√≤ng 40: Tr·∫£ v·ªÅ post t√¨m ƒë∆∞·ª£c

D√≤ng 47-60: Function addPost
export const addPost = (req, res) => {
  try {
    const { title, content } = req.body || {};
    if (!title || !content) {
      return res.status(400).json({ error: "Title and content are required" });
    }
    const nextId = posts.length > 0 ? Math.max(...posts.map((p) => p.id)) + 1 : 1;
    const newPost = { id: nextId, title, content };
    posts.push(newPost);
    return res.status(201).json(newPost);
  } catch (error) {
    return res.status(500).json({ error: "Internal server error" });
  }
};
‚Üí D√≤ng 49: L·∫•y title v√† content t·ª´ request body
‚Üí D√≤ng 50-52: Ki·ªÉm tra title v√† content c√≥ t·ªìn t·∫°i kh√¥ng
‚Üí D√≤ng 53: T√≠nh id ti·∫øp theo (id l·ªõn nh·∫•t + 1)
‚Üí D√≤ng 54: T·∫°o object post m·ªõi
‚Üí D√≤ng 55: Th√™m v√†o m·∫£ng posts
‚Üí D√≤ng 56: Tr·∫£ v·ªÅ post m·ªõi v·ªõi status 201 (Created)

D√≤ng 63-76: Function updatePost
export const updatePost = (req, res) => {
  try {
    const id = Number(req.params.id);
    const post = posts.find((p) => p.id === id);
    if (!post) return res.status(404).json({ error: "Post not found" });

    const { title, content } = req.body || {};
    post.title = title ?? post.title;
    post.content = content ?? post.content;
    return res.json(post);
  } catch (error) {
    return res.status(500).json({ error: "Internal server error" });
  }
};
‚Üí D√≤ng 66: T√¨m post c·∫ßn c·∫≠p nh·∫≠t
‚Üí D√≤ng 70-71: C·∫≠p nh·∫≠t title v√† content (d√πng ?? ƒë·ªÉ gi·ªØ gi√° tr·ªã c≈© n·∫øu kh√¥ng c√≥ gi√° tr·ªã m·ªõi)
‚Üí D√≤ng 72: Tr·∫£ v·ªÅ post ƒë√£ c·∫≠p nh·∫≠t

D√≤ng 79-89: Function deletePost
export const deletePost = (req, res) => {
  try {
    const id = Number(req.params.id);
    const index = posts.findIndex((p) => p.id === id);
    if (index === -1) return res.status(404).json({ error: "Post not found" });
    posts.splice(index, 1);
    return res.json({ success: true });
  } catch (error) {
    return res.status(500).json({ error: "Internal server error" });
  }
};
‚Üí D√≤ng 82: T√¨m index c·ªßa post c·∫ßn x√≥a
‚Üí D√≤ng 83: N·∫øu kh√¥ng t√¨m th·∫•y (index = -1), tr·∫£ v·ªÅ 404
‚Üí D√≤ng 84: X√≥a post kh·ªèi m·∫£ng b·∫±ng splice
‚Üí D√≤ng 85: Tr·∫£ v·ªÅ th√¥ng b√°o th√†nh c√¥ng

===============================================
üîÑ LU·ªíNG CH·∫†Y CHI TI·∫æT KHI CALL API
===============================================

V√ç D·ª§: GET /api/posts?search=b√†i

1. CLIENT g·ª≠i request:
   GET http://localhost:3000/api/posts?search=b√†i

2. SERVER nh·∫≠n request (app.js):
   - Morgan log: GET /api/posts?search=b√†i 200 5ms
   - Express parse URL v√† query parameters

3. ƒê·ªäNH TUY·∫æN (app.js d√≤ng 21):
   - URL "/api/posts" match v·ªõi app.use("/api/posts", postRouter)
   - Chuy·ªÉn request ƒë·∫øn postRouter

4. ROUTER (post.js d√≤ng 13):
   - URL "/" (sau khi b·ªè "/api/posts") match v·ªõi postRouter.get("/", getPosts)
   - G·ªçi function getPosts

5. CONTROLLER (postController.js):
   - req.query.search = "b√†i"
   - L·ªçc posts c√≥ title ch·ª©a "b√†i"
   - Tr·∫£ v·ªÅ JSON response

6. CLIENT nh·∫≠n response v√† c·∫≠p nh·∫≠t giao di·ªán

===============================================
üìä C√ÅC HTTP STATUS CODES S·ª¨ D·ª§NG
===============================================

200 - OK: Request th√†nh c√¥ng
201 - Created: T·∫°o m·ªõi th√†nh c√¥ng
400 - Bad Request: D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá
404 - Not Found: Kh√¥ng t√¨m th·∫•y resource
500 - Internal Server Error: L·ªói server

===============================================
üéØ C√ÅCH TEST API
===============================================

1. Kh·ªüi ƒë·ªông server:
   npm run dev

2. Test c√°c endpoint:
   - GET /api/posts (l·∫•y t·∫•t c·∫£)
   - GET /api/posts?search=b√†i (t√¨m ki·∫øm)
   - GET /api/posts/1 (l·∫•y theo id)
   - POST /api/posts (t·∫°o m·ªõi)
   - PUT /api/posts/1 (c·∫≠p nh·∫≠t)
   - DELETE /api/posts/1 (x√≥a)

3. S·ª≠ d·ª•ng Postman, Thunder Client, ho·∫∑c curl ƒë·ªÉ test

===============================================
